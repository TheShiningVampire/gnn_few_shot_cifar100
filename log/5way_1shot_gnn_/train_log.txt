todo             : train
dataset          : cifar100
model_type       : gnn
pretrain         : False
pretrain_dir     : 
use_gpu          : 0
seed             : 1
batch_size       : 16
lr               : 0.01
max_iteration    : 100000
log_interval     : 100
eval_interval    : 2000
early_stop       : 5
early_stop_pretrain : 5
test_dir         : 
data_root        : data
log_root         : log
model_root       : model
affix            : 
save             : False
load             : False
load_dir         : 
output_dir       : output
output_name      : output.txt
nway             : 5
shots            : 1
freeze_cnn       : False
model_folder     : model\5way_1shot_gnn_
log_folder       : log\5way_1shot_gnn_
gnnModel(
  (cnn_feature): EmbeddingCNN(
    (module_list): ModuleList(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (3): LeakyReLU(negative_slope=0.1, inplace=True)
      (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (7): LeakyReLU(negative_slope=0.1, inplace=True)
      (8): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (9): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (10): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (11): LeakyReLU(negative_slope=0.1, inplace=True)
      (12): Conv2d(128, 64, kernel_size=(4, 4), stride=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): LeakyReLU(negative_slope=0.1, inplace=True)
    )
  )
  (gnn): GNN(
    (gnn_obj): GNN_module(
      (adjacency_list): ModuleList(
        (0): Adjacency_layer(
          (module_list): ModuleList(
            (0): Conv2d(69, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
            (3): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
            (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): LeakyReLU(negative_slope=0.01)
            (6): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (1): Adjacency_layer(
          (module_list): ModuleList(
            (0): Conv2d(85, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
            (3): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
            (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): LeakyReLU(negative_slope=0.01)
            (6): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
          )
        )
      )
      (graph_conv_list): ModuleList(
        (0): Graph_conv_block(
          (weight): Linear(in_features=69, out_features=16, bias=True)
          (bn): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): Graph_conv_block(
          (weight): Linear(in_features=85, out_features=16, bias=True)
          (bn): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (last_adjacency): Adjacency_layer(
        (module_list): ModuleList(
          (0): Conv2d(101, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): LeakyReLU(negative_slope=0.01)
          (6): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (last_conv): Graph_conv_block(
        (weight): Linear(in_features=101, out_features=5, bias=True)
      )
    )
  )
)
iter: 0, spent: 6.7452 s, tr loss: 1.62613
================== eval ==================
iter: 0, va loss: 1.87842, va acc: 19.4311 %
==========================================
iter: 100, spent: 4.7458 s, tr loss: 1.65940
iter: 200, spent: 4.6464 s, tr loss: 1.63319
iter: 300, spent: 4.4996 s, tr loss: 1.62557
iter: 400, spent: 4.4578 s, tr loss: 1.61807
iter: 500, spent: 4.7097 s, tr loss: 1.61708
iter: 600, spent: 6.3791 s, tr loss: 1.61667
iter: 700, spent: 8.3624 s, tr loss: 1.61420
iter: 800, spent: 4.5974 s, tr loss: 1.61234
iter: 900, spent: 4.6511 s, tr loss: 1.61076
iter: 1000, spent: 4.5693 s, tr loss: 1.60596
iter: 1100, spent: 4.5018 s, tr loss: 1.60193
iter: 1200, spent: 4.5709 s, tr loss: 1.58703
iter: 1300, spent: 7.8219 s, tr loss: 1.58562
iter: 1400, spent: 10.3073 s, tr loss: 1.55451
iter: 1500, spent: 9.0613 s, tr loss: 1.55890
iter: 1600, spent: 4.7539 s, tr loss: 1.55416
iter: 1700, spent: 4.7403 s, tr loss: 1.55460
iter: 1800, spent: 4.4798 s, tr loss: 1.55606
iter: 1900, spent: 4.4911 s, tr loss: 1.53693
iter: 2000, spent: 4.4664 s, tr loss: 1.52721
================== eval ==================
iter: 2000, va loss: 1.49783, va acc: 33.7139 %
==========================================
iter: 2100, spent: 4.6798 s, tr loss: 1.52982
iter: 2200, spent: 5.1636 s, tr loss: 1.52414
iter: 2300, spent: 4.4702 s, tr loss: 1.52610
iter: 2400, spent: 4.5228 s, tr loss: 1.51421
iter: 2500, spent: 4.4752 s, tr loss: 1.49485
iter: 2600, spent: 4.5559 s, tr loss: 1.51098
iter: 2700, spent: 4.5313 s, tr loss: 1.47089
iter: 2800, spent: 4.4449 s, tr loss: 1.48608
iter: 2900, spent: 4.4093 s, tr loss: 1.47835
iter: 3000, spent: 4.4181 s, tr loss: 1.49602
iter: 3100, spent: 4.6032 s, tr loss: 1.50361
iter: 3200, spent: 4.4831 s, tr loss: 1.47468
iter: 3300, spent: 4.6105 s, tr loss: 1.48818
iter: 3400, spent: 4.4987 s, tr loss: 1.49531
iter: 3500, spent: 4.5644 s, tr loss: 1.48628
iter: 3600, spent: 4.5309 s, tr loss: 1.49478
iter: 3700, spent: 4.4157 s, tr loss: 1.49752
iter: 3800, spent: 4.4398 s, tr loss: 1.49074
iter: 3900, spent: 4.6564 s, tr loss: 1.47138
iter: 4000, spent: 4.4773 s, tr loss: 1.47889
================== eval ==================
iter: 4000, va loss: 1.53038, va acc: 31.1899 %
==========================================
iter: 4100, spent: 8.1347 s, tr loss: 1.47135
iter: 4200, spent: 10.2750 s, tr loss: 1.47777
iter: 4300, spent: 10.4648 s, tr loss: 1.47135
iter: 4400, spent: 10.3300 s, tr loss: 1.49226
iter: 4500, spent: 10.3065 s, tr loss: 1.47793
iter: 4600, spent: 10.4247 s, tr loss: 1.44810
iter: 4700, spent: 10.6014 s, tr loss: 1.49380
iter: 4800, spent: 10.3897 s, tr loss: 1.47779
iter: 4900, spent: 10.7647 s, tr loss: 1.47115
iter: 5000, spent: 10.8030 s, tr loss: 1.47378
iter: 5100, spent: 11.3513 s, tr loss: 1.47009
iter: 5200, spent: 10.8132 s, tr loss: 1.49082
iter: 5300, spent: 11.0363 s, tr loss: 1.45566
iter: 5400, spent: 10.8727 s, tr loss: 1.46438
iter: 5500, spent: 10.9235 s, tr loss: 1.47293
iter: 5600, spent: 11.1311 s, tr loss: 1.48794
iter: 5700, spent: 11.2808 s, tr loss: 1.47060
iter: 5800, spent: 11.2378 s, tr loss: 1.45305
iter: 5900, spent: 11.2652 s, tr loss: 1.48691
iter: 6000, spent: 11.3965 s, tr loss: 1.46056
================== eval ==================
iter: 6000, va loss: 1.48112, va acc: 35.1162 %
==========================================
iter: 6100, spent: 11.0153 s, tr loss: 1.45572
iter: 6200, spent: 10.8563 s, tr loss: 1.45537
iter: 6300, spent: 10.8435 s, tr loss: 1.45241
iter: 6400, spent: 11.1308 s, tr loss: 1.45100
iter: 6500, spent: 10.9307 s, tr loss: 1.45569
iter: 6600, spent: 11.2799 s, tr loss: 1.42565
iter: 6700, spent: 11.3678 s, tr loss: 1.45579
iter: 6800, spent: 11.3875 s, tr loss: 1.46675
iter: 6900, spent: 11.3635 s, tr loss: 1.44379
iter: 7000, spent: 11.4758 s, tr loss: 1.43715
iter: 7100, spent: 11.6398 s, tr loss: 1.45438
iter: 7200, spent: 11.5349 s, tr loss: 1.45170
iter: 7300, spent: 11.1338 s, tr loss: 1.44689
iter: 7400, spent: 11.3362 s, tr loss: 1.45697
iter: 7500, spent: 11.2797 s, tr loss: 1.43721
iter: 7600, spent: 11.3704 s, tr loss: 1.45294
iter: 7700, spent: 11.3716 s, tr loss: 1.44637
iter: 7800, spent: 11.3647 s, tr loss: 1.42204
iter: 7900, spent: 11.3557 s, tr loss: 1.45687
iter: 8000, spent: 11.4339 s, tr loss: 1.43652
================== eval ==================
iter: 8000, va loss: 1.49801, va acc: 34.2748 %
==========================================
iter: 8100, spent: 11.3830 s, tr loss: 1.47476
iter: 8200, spent: 11.3836 s, tr loss: 1.42785
iter: 8300, spent: 11.3003 s, tr loss: 1.41870
iter: 8400, spent: 11.2498 s, tr loss: 1.47623
iter: 8500, spent: 11.4602 s, tr loss: 1.43761
iter: 8600, spent: 10.9019 s, tr loss: 1.44479
iter: 8700, spent: 10.1619 s, tr loss: 1.44747
iter: 8800, spent: 4.2400 s, tr loss: 1.41334
iter: 8900, spent: 4.2392 s, tr loss: 1.43195
iter: 9000, spent: 4.2635 s, tr loss: 1.45976
iter: 9100, spent: 4.2376 s, tr loss: 1.43107
iter: 9200, spent: 4.1438 s, tr loss: 1.42565
iter: 9300, spent: 4.1838 s, tr loss: 1.47023
iter: 9400, spent: 4.2689 s, tr loss: 1.41339
iter: 9500, spent: 4.1807 s, tr loss: 1.42823
iter: 9600, spent: 4.1871 s, tr loss: 1.40656
iter: 9700, spent: 4.1583 s, tr loss: 1.43652
iter: 9800, spent: 4.1514 s, tr loss: 1.44972
iter: 9900, spent: 4.2087 s, tr loss: 1.42068
iter: 10000, spent: 4.2657 s, tr loss: 1.43774
================== eval ==================
iter: 10000, va loss: 1.49185, va acc: 34.7356 %
==========================================
iter: 10100, spent: 4.0684 s, tr loss: 1.41883
iter: 10200, spent: 4.2649 s, tr loss: 1.37865
iter: 10300, spent: 4.2636 s, tr loss: 1.41568
iter: 10400, spent: 4.1328 s, tr loss: 1.40859
iter: 10500, spent: 4.1947 s, tr loss: 1.43400
iter: 10600, spent: 4.2490 s, tr loss: 1.41519
iter: 10700, spent: 4.3139 s, tr loss: 1.42609
iter: 10800, spent: 4.1512 s, tr loss: 1.40124
iter: 10900, spent: 4.2735 s, tr loss: 1.38122
iter: 11000, spent: 4.2442 s, tr loss: 1.44156
iter: 11100, spent: 4.2109 s, tr loss: 1.40960
iter: 11200, spent: 4.1874 s, tr loss: 1.39981
iter: 11300, spent: 4.1921 s, tr loss: 1.39305
iter: 11400, spent: 4.2896 s, tr loss: 1.39490
iter: 11500, spent: 4.1236 s, tr loss: 1.42620
iter: 11600, spent: 4.2324 s, tr loss: 1.40314
iter: 11700, spent: 4.1939 s, tr loss: 1.35212
iter: 11800, spent: 4.2070 s, tr loss: 1.40640
iter: 11900, spent: 4.1988 s, tr loss: 1.38926
iter: 12000, spent: 4.1502 s, tr loss: 1.40127
================== eval ==================
iter: 12000, va loss: 1.42789, va acc: 36.8590 %
==========================================
iter: 12100, spent: 4.1706 s, tr loss: 1.39230
iter: 12200, spent: 4.2742 s, tr loss: 1.37953
iter: 12300, spent: 4.1702 s, tr loss: 1.35622
iter: 12400, spent: 4.1048 s, tr loss: 1.37990
iter: 12500, spent: 4.2154 s, tr loss: 1.36642
iter: 12600, spent: 4.2074 s, tr loss: 1.36064
iter: 12700, spent: 4.2885 s, tr loss: 1.36806
iter: 12800, spent: 4.8497 s, tr loss: 1.36999
iter: 12900, spent: 4.1771 s, tr loss: 1.40934
iter: 13000, spent: 4.0736 s, tr loss: 1.36693
iter: 13100, spent: 4.1645 s, tr loss: 1.38788
iter: 13200, spent: 4.1974 s, tr loss: 1.36132
iter: 13300, spent: 4.2652 s, tr loss: 1.38033
iter: 13400, spent: 4.1216 s, tr loss: 1.35644
iter: 13500, spent: 4.1874 s, tr loss: 1.34357
iter: 13600, spent: 4.2160 s, tr loss: 1.38072
iter: 13700, spent: 4.1647 s, tr loss: 1.36166
iter: 13800, spent: 4.2399 s, tr loss: 1.36011
iter: 13900, spent: 4.1349 s, tr loss: 1.36003
iter: 14000, spent: 4.3111 s, tr loss: 1.36879
================== eval ==================
iter: 14000, va loss: 1.47396, va acc: 35.5569 %
==========================================
iter: 14100, spent: 4.1371 s, tr loss: 1.34906
iter: 14200, spent: 4.5355 s, tr loss: 1.34596
iter: 14300, spent: 7.9801 s, tr loss: 1.36308
iter: 14400, spent: 10.8218 s, tr loss: 1.36351
iter: 14500, spent: 10.7470 s, tr loss: 1.34727
iter: 14600, spent: 11.1677 s, tr loss: 1.37139
iter: 14700, spent: 10.7987 s, tr loss: 1.36050
iter: 14800, spent: 10.6805 s, tr loss: 1.34408
iter: 14900, spent: 10.6135 s, tr loss: 1.33700
iter: 15000, spent: 10.8069 s, tr loss: 1.35528
iter: 15100, spent: 10.7798 s, tr loss: 1.34772
iter: 15200, spent: 10.7709 s, tr loss: 1.37110
iter: 15300, spent: 10.5842 s, tr loss: 1.34595
iter: 15400, spent: 10.8283 s, tr loss: 1.32667
iter: 15500, spent: 10.7560 s, tr loss: 1.34270
iter: 15600, spent: 10.7369 s, tr loss: 1.31897
iter: 15700, spent: 10.6898 s, tr loss: 1.33325
iter: 15800, spent: 10.7584 s, tr loss: 1.36155
iter: 15900, spent: 10.5785 s, tr loss: 1.33437
iter: 16000, spent: 10.6927 s, tr loss: 1.34105
================== eval ==================
iter: 16000, va loss: 1.49178, va acc: 35.0160 %
==========================================
iter: 16100, spent: 10.7239 s, tr loss: 1.34351
iter: 16200, spent: 10.7284 s, tr loss: 1.36463
iter: 16300, spent: 10.8112 s, tr loss: 1.36905
iter: 16400, spent: 10.8310 s, tr loss: 1.31743
iter: 16500, spent: 10.8269 s, tr loss: 1.29216
iter: 16600, spent: 10.7416 s, tr loss: 1.33609
iter: 16700, spent: 10.5829 s, tr loss: 1.36652
iter: 16800, spent: 10.8160 s, tr loss: 1.35795
iter: 16900, spent: 8.4155 s, tr loss: 1.31137
iter: 17000, spent: 9.9212 s, tr loss: 1.34937
iter: 17100, spent: 10.8550 s, tr loss: 1.28677
iter: 17200, spent: 11.0040 s, tr loss: 1.32334
iter: 17300, spent: 10.9988 s, tr loss: 1.35523
iter: 17400, spent: 10.9126 s, tr loss: 1.31055
iter: 17500, spent: 10.9898 s, tr loss: 1.33382
iter: 17600, spent: 6.9231 s, tr loss: 1.31797
iter: 17700, spent: 4.8825 s, tr loss: 1.32075
iter: 17800, spent: 4.1810 s, tr loss: 1.30510
iter: 17900, spent: 4.3142 s, tr loss: 1.32040
iter: 18000, spent: 4.5517 s, tr loss: 1.33995
================== eval ==================
iter: 18000, va loss: 1.48371, va acc: 35.7372 %
==========================================
iter: 18100, spent: 4.0806 s, tr loss: 1.28124
iter: 18200, spent: 4.2419 s, tr loss: 1.33133
iter: 18300, spent: 4.2040 s, tr loss: 1.33537
iter: 18400, spent: 4.2128 s, tr loss: 1.29711
iter: 18500, spent: 4.5692 s, tr loss: 1.31953
iter: 18600, spent: 5.1613 s, tr loss: 1.29981
iter: 18700, spent: 4.8095 s, tr loss: 1.31851
iter: 18800, spent: 4.4764 s, tr loss: 1.31526
iter: 18900, spent: 4.6865 s, tr loss: 1.28166
iter: 19000, spent: 4.9352 s, tr loss: 1.33136
iter: 19100, spent: 4.6122 s, tr loss: 1.30891
iter: 19200, spent: 4.3801 s, tr loss: 1.29351
iter: 19300, spent: 4.5388 s, tr loss: 1.32259
iter: 19400, spent: 4.4797 s, tr loss: 1.32287
iter: 19500, spent: 4.6159 s, tr loss: 1.34344
iter: 19600, spent: 4.3230 s, tr loss: 1.32123
iter: 19700, spent: 4.8189 s, tr loss: 1.31707
iter: 19800, spent: 4.3711 s, tr loss: 1.31771
iter: 19900, spent: 4.3197 s, tr loss: 1.32020
iter: 20000, spent: 4.1866 s, tr loss: 1.31712
================== eval ==================
iter: 20000, va loss: 1.46187, va acc: 36.9591 %
==========================================
iter: 20100, spent: 4.6977 s, tr loss: 1.32610
iter: 20200, spent: 4.5239 s, tr loss: 1.29599
iter: 20300, spent: 4.4385 s, tr loss: 1.30345
iter: 20400, spent: 4.4669 s, tr loss: 1.27516
iter: 20500, spent: 4.8050 s, tr loss: 1.31724
iter: 20600, spent: 5.4260 s, tr loss: 1.31535
iter: 20700, spent: 5.0131 s, tr loss: 1.30615
iter: 20800, spent: 5.0125 s, tr loss: 1.33069
iter: 20900, spent: 7.8508 s, tr loss: 1.30820
iter: 21000, spent: 11.2024 s, tr loss: 1.27548
iter: 21100, spent: 11.1804 s, tr loss: 1.27797
iter: 21200, spent: 11.1626 s, tr loss: 1.28244
iter: 21300, spent: 10.8740 s, tr loss: 1.33210
iter: 21400, spent: 10.7708 s, tr loss: 1.30426
iter: 21500, spent: 10.9476 s, tr loss: 1.29585
iter: 21600, spent: 11.0430 s, tr loss: 1.27701
iter: 21700, spent: 11.5258 s, tr loss: 1.30908
iter: 21800, spent: 11.5194 s, tr loss: 1.27298
iter: 21900, spent: 11.4148 s, tr loss: 1.27996
iter: 22000, spent: 11.1553 s, tr loss: 1.26805
================== eval ==================
iter: 22000, va loss: 1.48050, va acc: 37.1394 %
==========================================
============= best result ===============
best loss: 1.42789, best acc: 36.8590 %
